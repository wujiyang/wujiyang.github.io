<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[《正阳门下》]]></title>
    <url>%2F2017%2F07%2F23%2F%E5%90%91%E9%98%B3%E9%97%A8%E4%B8%8B%2F</url>
    <content type="text"><![CDATA[茶飘香 酒罢去 聚朋友 再回楼 &emsp;&emsp;好剧推荐。 &emsp;&emsp;目前为止，看到的为数不多的几部反映上世纪70，80，90年代民风民俗的影视作品，一个是《平凡的世界》，一个就是现在看到的《正阳门下》。 &emsp;&emsp;还记得本科，室友马老板看这种类型的电视剧的时候，我觉得他逼格好高，对此甚至有点不屑一顾。但现在回过头来看看，自己是有点傻逼了，果然还是没有他的境界高，看来我比他的成长慢了两三年呢！ &emsp;&emsp;初看这部剧的时候，是被韩春明和苏萌的couple line所吸引。但后面越看越纠结，越看越难受，这部剧展现的北京四合院风情很好的诠释了这4个字： 人生百态&emsp;&emsp;男女主之间的奇葩爱情&emsp;&emsp;真兄弟之间的掏心掏肺&emsp;&emsp;恶小人之间的勾心斗角&emsp;&emsp;老北京人间的文化传承 &emsp;&emsp;看剧的时候感触颇深，但真的动起笔来时，发现只剩下这寥寥数语。算了，就写到这里吧，具体的那份情谊还需要自己去理解，去感受，去学习，去醒悟。。。 众里寻他千百度蓦然回首那人却在灯火阑珊处]]></content>
      <categories>
        <category>心情随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《看见》经典语录]]></title>
    <url>%2F2017%2F07%2F11%2F%E6%9F%B4%E9%9D%99-%E7%9C%8B%E8%A7%81%2F</url>
    <content type="text"><![CDATA[引言&emsp;&emsp;命运如同手中的掌纹，无论多么曲折，终究掌握在自己手中。初读《看见》，见到的是柴静奋斗的人生，见到的是柴静于平凡的故事中敢于追寻生活的真相。&emsp;&emsp;普通的文字饱含甜甜的感动，遂将阅读过程中的所看所想记录如下，也算是以后的一个回忆吧。 第一章 别当了主持人就不是人了 “道德，不是没有弱点，而是看清它，然后抑制它。” “人们声称的最美好的岁月其实都是最痛苦的，只是事后回忆起来的时候才那么幸福。” &emsp;&emsp;对这段话还是深有体会的。读书已经读到了现在，最美好的回忆大概还是高中。虽然那个时候很累，但是却活得很开心，生活很有节奏。大家为了同一个目标而一起努力的样子依旧历历在目，每一次回想，都是一种幸福。&emsp;&emsp;本科四年一晃而过，读研的时候有些怀念，但怀念的只是一种情怀，一种感恩，感谢大学四年开阔了我的眼界，增长了我的学识，更重要的是对我人生以后的一种指引。前段时间看到了本科张修如老师的知青回忆录，那才是生活，那才是财富。&emsp;&emsp;转眼间研究生一年级就这样过去了，再有两年我也即将结束自己的求学生涯。弹指间20多年就这样过去了，希望以后回忆起来的大多数都是幸福。 第二章 那个温热的跳动就是活着 “我摸着血管，这就是最原始的东西。活着就是活着。在所有的灾难中，这个温热的跳动就是活着。” &emsp;&emsp;03年非典的时候，我10岁，小学3年级。&emsp;&emsp;无知者无畏，那个时候的童真好像还不足以让我意识到SARS的恐怖，唯一在乎的就是我们在连续放了2个20天的假期之后还能不能继续享受没有作业没有课程的光阴。当时还为了每天都要量体温，喝板蓝根而苦恼（其实板蓝根还是挺好喝的）。后来听说我们的老师每天都要轮流去镇上的街道进行消毒工作，好像才渐渐明白问题的严重性，但依然不如长大后看到的数据震撼。柴静能一直在SARS的一线进行采访工作，我想还是很有勇气的，至少我很钦佩。 “人们还能笑的时候，是不容易打败的” &emsp;&emsp; 是吗？是的！ “在清水里呛呛，血水里泡泡，咸水里滚滚” &emsp;&emsp;这句话是大家问一个老人做XXX对不对的时候，老人给出的回复。行胜于言，多经历多了解多思考才能更加全面的认识一件事，一个观点。无论什么时候这句话都适用。 众里寻他千百度蓦然回首那人却在灯火阑珊处]]></content>
      <categories>
        <category>心情随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于VGG-Face的人脸识别测试]]></title>
    <url>%2F2017%2F03%2F03%2FVGG-Face%2F</url>
    <content type="text"><![CDATA[VGG Face Descriptor 是牛津大学VGG小组的工作，现在已经开源训练好的网络结构和模型参数，本文将基于此模型在caffe上使用自己的人脸数据微调，并进行特征提取与精确度验证。数据传送门：CASIA WebFace模型传送门：http://www.robots.ox.ac.uk/~vgg/software/vgg_face/ 模型准备1.从上面的网址中下载VGG-Face已经训练好的模型和网络结构文件，根据deploy.proto文件来修改得到train_val.prototxt文件，主要有：修改数据层的输入和最后全连接层以及损失层等，注意fc8层名称的修改，具体如下： name: "VGG_FACE_16_layers" layer { name: "data" type: "Data" top: "data" top: "label" include { phase: TRAIN } transform_param { mirror: true crop_size: 224 # mean_file: "data/ilsvrc12/imagenet_mean.binaryproto" } data_param { source: "vggface/webface_train_lmdb" batch_size: 32 backend: LMDB } } layer { name: "data" type: "Data" top: "data" top: "label" include { phase: TEST } transform_param { mirror: false crop_size: 224 # mean_file: "data/ilsvrc12/imagenet_mean.binaryproto" } data_param { source: "vggface/webface_val_lmdb" batch_size: 32 backend: LMDB } } ...... layer { bottom: "fc7" top: "fc8_s" name: "fc8_s" type: "InnerProduct" param { lr_mult: 10 decay_mult: 1 } param { lr_mult: 20 decay_mult: 0 } inner_product_param { num_output: 2031 weight_filler { type: "gaussian" std: 0.01 } bias_filler { type: "constant" value: 0.1 } } } layer { name: "accuracy" type: "Accuracy" bottom: "fc8_s" bottom: "label" top: "accuracy" include { phase: TEST } } layer { name: "loss" type: "SoftmaxWithLoss" bottom: "fc8_s" bottom: "label" top: "loss" } 模型训练本次训练，我采用的是webface中人脸数量在50张以上的个人类别，总共有两千多个。按照caffe的工具转换成lmdb格式即可开始训练。 模型效果测试模型训练结束之后，在lfw上验证实验效果。lfw数据对使用官方提供的txt文件，不过我觉得格式不太好，就自己用脚本进行了些许修改：pairs.txt Abel_Pacheco 1 4 Akhmed_Zakayev 1 3 Akhmed_Zakayev 2 3 Amber_Tamblyn 1 2 Anders_Fogh_Rasmussen 1 3 Anders_Fogh_Rasmussen 1 4 修改后，将一对图片的路径放在一起，属于同一个人为1，否则为0 Abel_Pacheco/Abel_Pacheco_0001.jpg Abel_Pacheco/Abel_Pacheco_0004.jpg 1 Akhmed_Zakayev/Akhmed_Zakayev_0001.jpg Akhmed_Zakayev/Akhmed_Zakayev_0003.jpg 1 Akhmed_Zakayev/Akhmed_Zakayev_0002.jpg Akhmed_Zakayev/Akhmed_Zakayev_0003.jpg 1 Amber_Tamblyn/Amber_Tamblyn_0001.jpg Amber_Tamblyn/Amber_Tamblyn_0002.jpg 1 脚本如下： #!/usr/bin/python #-*- coding: utf-8 -*- #Created on Thur Mar 2 10:17:38 2017 #Goal:parse pairs.txt of LFW database to label.txt for face #recognition test #@author: wujiyang import sys def get_all_images(filename): file = open(filename) lines = file.readlines() list = [] for line in lines: line_split = line.strip('\n').split('\t') if(len(line_split)) == 3: line_split[-1] = line_split[-1].zfill(4) line_split[-2] = line_split[-2].zfill(4) if(len(line_split)) == 4: line_split[-1] = line_split[-1].zfill(4) line_split[-3] = line_split[-3].zfill(4) list.append(line_split) file.close() return list def save2labelfile(list): file = open('label.txt', 'w') labellines = [] for i in range(len(list)): if len(list[i]) == 3: labelline = list[i][0] + '/' + list[i][0] + '_' + list[i][1] + '.jpg' + '\t' + 'original' + '/' + list[i][0] + '/' + list[i][0] + '_' +list[i][2] + '.jpg' + '\t' + '1\n' labellines.append(labelline) elif len(list[i]) == 4: labelline = list[i][0] + '/' + list[i][0] + '_' + list[i][1] + '.jpg' + '\t' + 'original' + '/' + list[i][2] + '/' + list[i][2] + '_' + list[i][3] + '.jpg' + '\t' + '0\n' labellines.append(labelline) file.writelines(labellines) file.close() ''''' 使用方法：执行脚本 python pair2label.py pairs.txt ''' if __name__ == "__main__": if len(sys.argv) != 2: print "Format Error! Usuage: python %s pairs.txt" %(sys.argv[0]) sys.exit() list = get_all_images("pairs.txt") save2labelfile(list) print "Done!" 特征提取与验证此脚本采用caffe的python接口进行特征提取与验证。 # -*- coding: utf-8 -*- """ Created on Mon Apr 20 16:55:55 2015 @author: wujiyang @brief：在lfw数据库上验证训练好了的网络 """ import math import sklearn import numpy as np import matplotlib.pyplot as plt import skimage caffe_root = '/home/wujiyang/caffe/' import sys sys.path.insert(0, caffe_root + 'python') import caffe import sklearn.metrics.pairwise as pw #模型初始化相关操作 def initilize(): print 'model initilizing...' deployPrototxt = "./vgg-face-deploy.prototxt" modelFile = "./vgg-face.caffemodel" caffe.set_mode_gpu() caffe.set_device(0) net = caffe.Net(deployPrototxt, modelFile,caffe.TEST) return net def read_imagelist(labelfile): ''' @brief：从列表文件中，读取图像数据到矩阵文件中 @param： labelfile 图像列表文件 @return ：4D 的矩阵 ''' file = open(labelfile) lines = file.readlines() test_num=len(lines) file.close() x = np.empty((test_num,3,224,224)) y = np.empty((test_num,3,224,224)) labels = [] i = 0 for line in lines: path = line.strip('\n').split('\t') #read left image filename = path[0] img = skimage.io.imread(filename,as_grey=False) image = skimage.transform.resize(img,(224,224))*255 if image.ndim &lt; 3: print 'gray:'+filename x[i,0,:,:]=image[:,:] x[i,1,:,:]=image[:,:] x[i,2,:,:]=image[:,:] else: x[i,0,:,:]=image[:,:,0] x[i,1,:,:]=image[:,:,1] x[i,2,:,:]=image[:,:,2] #read right image filename = path[1] img = skimage.io.imread(filename,as_grey=False) image = skimage.transform.resize(img,(224,224))*255 if image.ndim &lt; 3: print 'gray:'+filename y[i,0,:,:]=image[:,:] y[i,1,:,:]=image[:,:] y[i,2,:,:]=image[:,:] else: y[i,0,:,:]=image[:,:,0] y[i,1,:,:]=image[:,:,1] y[i,2,:,:]=image[:,:,2] #read label labels.append(int(path[2])) i=i+1 return x, y, labels def extractFeature(leftdata,rightdata): #提取左半部分的特征 test_num=np.shape(leftdata)[0] #data 是输入层的名字 out = net.forward_all(data = leftdata) feature1 = np.float64(out['fc7']) featureleft=np.reshape(feature1,(test_num,4096)) #np.savetxt('feature1.txt', feature1, delimiter=',') #提取右半部分的特征 out = net.forward_all(data = rightdata) feature2 = np.float64(out['fc7']) featureright=np.reshape(feature2,(test_num,4096)) #np.savetxt('feature2.txt', feature2, delimiter=',') return featureleft, featureright def calculate_accuracy(distance,labels,num): ''' #计算识别率, 选取阈值，计算识别率 ''' accuracy = {} predict = np.empty((num,)) threshold = 0.1 while threshold &lt;= 0.9 : for i in range(num): if distance[i] &gt;= threshold: predict[i] = 0 else: predict[i] = 1 predict_right = 0.0 for i in range(num): if predict[i] == labels[i]: predict_right += 1.0 current_accuracy = (predict_right / num) accuracy[str(threshold)] = current_accuracy threshold = threshold + 0.001 #将字典按照value排序 temp = sorted(accuracy.items(), key = lambda d:d[1], reverse = True) highestAccuracy = temp[0][1] thres = temp[0][0] return highestAccuracy, thres if __name__=='__main__': #模型初始化 net = initilize() print 'network input :' ,net.inputs print 'network output： ', net.outputs #读取图像数据 leftdata,rightdata,labels = read_imagelist('tmp.txt') #计算特征 featureleft, featureright = extractFeature(leftdata, rightdata) #计算每个特征之间的距离 cosine距离 test_num = len(labels) mt = pw.pairwise_distances(featureleft, featureright, metric='cosine') distance = np.empty((test_num,)) for i in range(test_num): distance[i] = mt[i][i] print 'Distance before normalization:\n', distance print 'Distance max:', np.max(distance), ' Distance min:', np.min(distance), '\n' # 距离需要归一化到0--1,与标签0-1匹配 distance_norm = np.empty((test_num,)) for i in range(test_num): distance_norm[i] = (distance[i]-np.min(distance))/(np.max(distance)-np.min(distance)) print 'Distance after normalization:\n', distance_norm print 'Distance_norm max:', np.max(distance_norm), ' Distance_norm min:', np.min(distance_norm), '\n' #根据label和distance_norm计算精确度 highestAccuracy, threshold = calculate_accuracy(distance_norm,labels,len(labels)) print ("the highest accuracy is : %.4f, and the corresponding threshold is %s \n"%(highestAccuracy, threshold))]]></content>
      <categories>
        <category>caffe</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>人脸识别</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[技巧性笔试题目总结]]></title>
    <url>%2F2017%2F02%2F27%2F%E6%8A%80%E5%B7%A7%E6%80%A7%E7%AC%94%E8%AF%95%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[此贴用来记录牛客网刷题算法记录,其中以技巧性的选择填空题为主，涉及到的算法程序题会另开一贴！ 计算二进制中1的个数方案一： while (n &gt;0 ) { count ++; n = n &amp; (n-1); } 方案二： int BitCount(unsigned int n) { n = (n &amp;0x55555555) + ((n &gt;&gt;1) &amp;0x55555555) ; n = (n &amp;0x33333333) + ((n &gt;&gt;2) &amp;0x33333333) ; n = (n &amp;0x0f0f0f0f) + ((n &gt;&gt;4) &amp;0x0f0f0f0f) ; n = (n &amp;0x00ff00ff) + ((n &gt;&gt;8) &amp;0x00ff00ff) ; n = (n &amp;0x0000ffff) + ((n &gt;&gt;16) &amp;0x0000ffff) ; return n ; } To be continued…]]></content>
      <categories>
        <category>笔试刷题</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>算法</tag>
        <tag>技巧型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu16.04+cuda8.0+opencv3.0.0 caffe编译的那些坑]]></title>
    <url>%2F2017%2F02%2F20%2Fcaffe%2F</url>
    <content type="text"><![CDATA[前言&emsp;&emsp;生命在于折腾！&emsp;&emsp;最近突然想体验一下ubuntu16.04的使用感觉，就重装了操作系统。原本在ubuntu14.04的时候，按照实验室欧大神的博客一路畅通，但此次的caffe编译之旅，可谓到处是坑，遂将这些记录下来。主要安装路线依然是按照这篇博客的顺序：http://blog.csdn.net/shiorioxy/article/details/52652831 注意：&emsp;&emsp;由于我在编译OpenCV时，想进行多版本的管理，故没有将opencv的安装位置设在/usr/local/中，而是自定义的位置，这需要在以后编译caffe时，在makefile.config中对动态链接库进行配置。 编译主要问题1. gcc g++版本问题&emsp;&emsp;ubuntu16.04自带的gcc和g++为5.4.0，但是cuda8.0目前还不支持5以后的版本。如果按照欧博为了兼容matlab2014而降级到gcc4.7的话，编译opencv3.0.0时会出现： /usr/bin/ld:cannot find -latomic 这是因为gcc4.7还没有正式支持atomic，以后才有新的支持。我在编译opencv的时候降级到4.9.3.编译opencv没有问题了，但是在编译caffe-master时又会出现类似下面这样的未定义引用错误：undefined reference to google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray .build_release/lib/libcaffe.so: undefined reference to `google::protobuf::io::CodedOutputStream::WriteStringWithSizeToArray (std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned char*)' 所以：最好还是使用全部ubuntu16.04自带的gcc 5.4.0版本进行编译，并暴力注释掉cuda8.0的报错提醒。还有一点，在安装的时候更新google-glog-lib至0.3.4版本，暴力注释报错提醒的方法： $ sudo gedit /usr/local/cuda/include/host_config.h 搜索： #error -- unsupported GNU version! gcc versions later than 5.3 are not supported! 修改为： //#error -- unsupported GNU version! gcc versions later than 5.3 are not supported! 2. opencv2.4系列和opencv3.0系列跟cuda8.0的不兼容2.1 编译opencv2.4.10时，出现nvcc fatal:Unsupported gpu architecture ‘computer_11’在cmake时指定自己的GPU架构，比如我的GTX760显卡是开普勒架构，就改为： cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local/ -D CUDA_GENERATION=Kepler -D WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D BUILD_EXAMPLES=ON -D WITH_QT=OFF -D WITH_OPENGL=ON -D BUILD_TIFF=ON .. 或者设置为自动识别 cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local -D BUILD_TIFF=ON -D BUILD_EXAMPLES=ON -D CUDA_GENERATION=Auto -D BUILD_NEW_PYTHON_SUPPORT=ON .. 2.2 编译opencv3.0.0时，需要修改以下位置～/opencv/modules/cudalegacy/src/graphcuts.cpp #include "precomp.hpp" //#if !defined (HAVE_CUDA) || defined (CUDA_DISABLER) #if !defined (HAVE_CUDA) || defined (CUDA_DISABLER) || (CUDART_VERSION &gt;= 8000) void cv::cuda::graphcut(GpuMat&amp;, GpuMat&amp;, GpuMat&amp;, GpuMat&amp;, GpuMat&amp;, GpuMat&amp;, GpuMat&amp;, Stream&amp;) { throw_no_cuda(); } void cv::cuda::graphcut(GpuMat&amp;, GpuMat&amp;, GpuMat&amp;, GpuMat&amp;, GpuMat&amp;, GpuMat&amp;, GpuMat&amp;, GpuMat&amp;, GpuMat&amp;, GpuMat&amp;, GpuMat&amp;, Stream&amp;) { throw_no_cuda(); } 3.安装blas库：intel parallel studio xe3.1 ubuntu16.04不再支持parallel_studio_xe_2016_update1.需要重新下载2017版本 3.2 安装parallel_studio_xe_2017_update1的时候提示：32-bit libraries not found on this system 32-bit libraries not found on this system. This product release requires the presence of 32-bit compatibility libraries when running on Intel(R) 64 architecture systems. One or more of these libraries could not be found: libstdc++ (including libstdc++6) glibc libgcc Without these libraries, the compiler will not function properly. Please refer to Release Notes for more information. 这个问题其实我没处理，因为不使用32位库，就直接安装了，后面也没碰到什么问题。 4. 编译caffe-masterMakefile.config的配置，常规配置都和欧博的一样，主要需要注意的是，我的opencv安装路径不在默认位置，需要自己指定，还有就是注意hdf5的路径位置，ubuntu16.04的文件位置发生了变化。 # Whatever else you find you need goes here. # 这里加入了opencv3的库路径 INCLUDE_DIRS := $(PYTHON_INCLUDE) \ /usr/local/include \ /usr/include/hdf5/serial \ /usr/local/opencv3.0.0/include \ /usr/local/opencv3.0.0/include/opencv \ /usr/local/opencv3.0.0/include/opencv2 LIBRARY_DIRS := $(PYTHON_LIB) \ /usr/lib \ /usr/local/lib \ /usr/lib/x86_64-linux-gnu \ /usr/lib/x86_64-linux-gnu/hdf5/serial \ /usr/local/opencv3.0.0/lib 当然，opencv的配置也可以使用opencv.pc文件，然后，将USE_PKG_CONFIG打开 # Uncomment to use `pkg-config` to specify OpenCV library paths. # (Usually not necessary -- OpenCV libraries are normally installed in one of the above $LIBRARY_DIRS.) USE_PKG_CONFIG := 1 两种方法都可以。 现在可以愉快地开始 make all 了。]]></content>
      <categories>
        <category>caffe</category>
      </categories>
      <tags>
        <tag>caffe</tag>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[青玉案·元夕]]></title>
    <url>%2F2017%2F02%2F16%2F%E9%9D%92%E7%8E%89%E6%A1%88%C2%B7%E5%85%83%E5%A4%95%2F</url>
    <content type="text"><![CDATA[青玉案·元夕东风夜放花千树。更吹落、星如雨。宝马雕车香满路。凤箫声动，玉壶光转，一夜鱼龙舞。蛾儿雪柳黄金缕。笑语盈盈暗香去。众里寻他千百度。蓦然回首，那人却在，灯火阑珊处。 作者简介&emsp;&emsp;辛弃疾（1140年5月28日－1207年10月3日），字幼安，号稼轩，山东东路济南府历城县（今济南市历城区遥墙镇四凤闸村）人。南宋豪放派词人、将领，有“词中之龙”之称。与苏轼合称“苏辛”，与李清照并称“济南二安”。 &emsp;&emsp;辛弃疾一生以恢复为志，以功业自许，可是命运多舛，备受排挤，壮志难酬。但他恢复中原的爱国信念始终没有动摇，而把满腔激情和对国家兴亡、民族命运的关切、忧虑，全部寄寓于词作之中[1] 。其词艺术风格多样，以豪放为主，风格沉雄豪迈又不乏细腻柔媚之处。其词题材广阔又善化用前人典故入词，抒写力图恢复国家统一的爱国热情，倾诉壮志难酬的悲愤，对当时执政者的屈辱求和颇多谴责；也有不少吟咏祖国河山的作品。著名词作《水调歌头·带湖吾甚爱》、《摸鱼儿·更能消几番风雨》、《满江红·家住江南》、《沁园春·杯汝来前》、《西江月·夜行黄沙道中》等。现存词600多首，有词集《稼轩长短句》等传世。]]></content>
      <categories>
        <category>心情随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>